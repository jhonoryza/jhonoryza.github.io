/* generated by Svelte v3.23.2 */
import {
	SvelteComponent,
	append,
	attr,
	binding_callbacks,
	children,
	claim_element,
	claim_space,
	claim_text,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	null_to_empty,
	safe_not_equal,
	set_data,
	space,
	text
} from '/spa/web_modules/svelte/internal/index.js';

function create_fragment(ctx) {
	let div;
	let span;
	let t0;
	let t1;
	let pre;
	let code;
	let t2;
	let t3;
	let t4;
	let code_class_value;
	let t5;
	let button;
	let t6;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			span = element("span");
			t0 = text("Template:");
			t1 = space();
			pre = element("pre");
			code = element("code");
			t2 = text("layout/content/");
			t3 = text(/*type*/ ctx[0]);
			t4 = text(".svelte");
			t5 = text("\n    ");
			button = element("button");
			t6 = text(/*copyText*/ ctx[2]);
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			span = claim_element(div_nodes, "SPAN", {});
			var span_nodes = children(span);
			t0 = claim_text(span_nodes, "Template:");
			span_nodes.forEach(detach);
			t1 = claim_space(div_nodes);
			pre = claim_element(div_nodes, "PRE", { class: true });
			var pre_nodes = children(pre);
			code = claim_element(pre_nodes, "CODE", { class: true });
			var code_nodes = children(code);
			t2 = claim_text(code_nodes, "layout/content/");
			t3 = claim_text(code_nodes, /*type*/ ctx[0]);
			t4 = claim_text(code_nodes, ".svelte");
			code_nodes.forEach(detach);
			t5 = claim_text(pre_nodes, "\n    ");
			button = claim_element(pre_nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			t6 = claim_text(button_nodes, /*copyText*/ ctx[2]);
			button_nodes.forEach(detach);
			pre_nodes.forEach(detach);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(code, "class", code_class_value = "" + (null_to_empty(/*copyText*/ ctx[2]) + " svelte-kyi9jr"));
			attr(button, "class", "svelte-kyi9jr");
			attr(pre, "class", "svelte-kyi9jr");
			attr(div, "class", "template svelte-kyi9jr");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, span);
			append(span, t0);
			append(div, t1);
			append(div, pre);
			append(pre, code);
			append(code, t2);
			append(code, t3);
			append(code, t4);
			/*code_binding*/ ctx[4](code);
			append(pre, t5);
			append(pre, button);
			append(button, t6);

			if (!mounted) {
				dispose = listen(button, "click", /*copy*/ ctx[3]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*type*/ 1) set_data(t3, /*type*/ ctx[0]);

			if (dirty & /*copyText*/ 4 && code_class_value !== (code_class_value = "" + (null_to_empty(/*copyText*/ ctx[2]) + " svelte-kyi9jr"))) {
				attr(code, "class", code_class_value);
			}

			if (dirty & /*copyText*/ 4) set_data(t6, /*copyText*/ ctx[2]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			/*code_binding*/ ctx[4](null);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { type } = $$props;
	let path;
	let copyText = "Copy";

	const copy = async () => {
		if (!navigator.clipboard) {
			return;
		}

		try {
			$$invalidate(2, copyText = "Copied");
			await navigator.clipboard.writeText(path.innerHTML);
			setTimeout(() => $$invalidate(2, copyText = "Copy"), 500);
		} catch(err) {
			console.error("Failed to copy!", err);
		}
	};

	function code_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			path = $$value;
			$$invalidate(1, path);
		});
	}

	$$self.$set = $$props => {
		if ("type" in $$props) $$invalidate(0, type = $$props.type);
	};

	return [type, path, copyText, copy, code_binding];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { type: 0 });
	}
}

export default Component;